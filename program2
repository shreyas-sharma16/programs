import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models, transforms
from PIL import Image

# Define data transformations for preprocessing
data_transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Load a pre-trained ResNet-50 model
model = models.resnet50(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 2)  # Replace the final fully connected layer for binary classification

# Define a loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

# Load an image to classify
image_path = '/path/to/image.jpg'
image = data_transform(Image.open(image_path)).unsqueeze(0)  # Preprocess and add batch dimension

# Save the model's weights
torch.save(model.state_dict(), 'resnet50_pretrained_weights.pth')

# Set the model to evaluation mode and make predictions
model.eval()
with torch.no_grad():
    outputs = model(image)
    _, predicted = torch.max(outputs, 1)

# Map class indices to class labels
class_labels = ['cat', 'dog']
predicted_class = class_labels[predicted.item()]
print(f'The image is classified as: {predicted_class}')
